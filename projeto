import pygame
import sys
import time
import random

pygame.init()

# Configuração da tela
tela = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)
largura, altura = tela.get_size()
pygame.display.set_caption("Menu do Jogo")

class Remedio:
    def __init__(self, x, y, size, color): 
        self.x = x
        self.y = y
        self.size = size
        self.color = color

    def draw(self, screen):
        pygame.draw.rect(screen, self.color, (self.x, self.y, self.size, self.size))

class Inimigo:
    def __init__(self, x, y, size, color, velocidade):
        self.x = x
        self.y = y
        self.size = size
        self.color = color
        self.velocidade = velocidade
        self.direcao_x = random.choice([-1, 1])  # Inicia movendo aleatoriamente em X
        self.direcao_y = random.choice([-1, 1])  # Inicia movendo aleatoriamente em Y

    def mover(self):
        # Movimento aleatório do inimigo
        self.x += self.direcao_x * self.velocidade
        self.y += self.direcao_y * self.velocidade

        # Se colidir com a parede, mudar de direção
        if self.x <= 0 or self.x + self.size >= largura:
            self.direcao_x *= -1
        if self.y <= 0 or self.y + self.size >= altura:
            self.direcao_y *= -1

    def draw(self, screen):
        pygame.draw.rect(screen, self.color, (self.x, self.y, self.size, self.size))

# Cores
PRETO = (0, 0, 0)
BRANCO = (255, 255, 255)
VERDE = (0, 255, 0)
AZUL = (0, 0, 255)
VERMELHO = (255, 0, 0)
fonte = pygame.font.SysFont(None, 55)

# Posições e configurações iniciais
personagem_pos = [largura // 2 - 25, altura // 2 - 25]  
largura_personagem = 50
altura_personagem = 50

# Carregar o sprite do personagem
sprite_perso = pygame.image.load("Personagem.png").convert_alpha()
sprite_perso = pygame.transform.scale(sprite_perso, (largura_personagem, altura_personagem))  # Redimensionar


tempo_limite = 60  
placar = 0
contagem_tela = 0  # Variável de contagem para controlar as telas
tempo_inicial = time.time()  # Inicializa o tempo_inicial
velocidade_personagem = 2.0  # Velocidade inicial do personagem
paralisado = False  # Flag para saber se o personagem está paralisado
tempo_paralisado = 0  # Controla o tempo de paralisação

# Controle de colisão com as paredes
bateu_na_parede = False
colisoes = 0  # Contador de colisões para aumentar a dificuldade com o tempo

def desenhar_texto(texto, x, y, tamanho=55, cor=BRANCO):
    fonte = pygame.font.SysFont(None, tamanho)
    superficie = fonte.render(texto, True, cor)
    tela.blit(superficie, (x, y))

def segundaTela():
    tela.fill(PRETO)
    desenhar_texto("Fase 1", largura // 2 - 75, altura // 4, tamanho=80)
    pygame.display.flip()

def terceiraTela():
    tela.fill(PRETO)
    desenhar_texto("Fase 2", largura // 2 - 75, altura // 4, tamanho=80)
    
    # Definindo o caminho do corredor com curvas retas
    pontos = [
        (100, altura // 2),  # Ponto inicial
        (500, altura // 2),  # Primeira linha reta
        (500, altura // 2 + 150),  # Curva para baixo
        (900, altura // 2 + 150),  # Segunda linha reta
        (900, altura // 2),  # Curva para cima
        (1200, altura // 2),  # Última linha reta
    ]
    
    # Desenhando o corredor com as curvas retas
    for i in range(len(pontos) - 1):
        pygame.draw.line(tela, AZUL, pontos[i], pontos[i + 1], 10)
    
    pygame.display.flip()

def tela_final(remedios_coletados, placar, tempo_restante):
    tela.fill(PRETO)
    desenhar_texto("Fim de Jogo!", largura // 2 - 100, altura // 4, tamanho=80)
    
    # Informações de final de jogo
    desenhar_texto(f"Remédios Coletados: {remedios_coletados}", largura // 2 - 200, altura // 2 - 50, tamanho=40)
    desenhar_texto(f"Placar Final: {placar}", largura // 2 - 200, altura // 2, tamanho=40)
    minutos = tempo_restante // 60
    segundos = tempo_restante % 60
    cronometro_texto = f"Tempo Restante: {minutos:02}:{segundos:02}"
    desenhar_texto(cronometro_texto, largura // 2 - 200, altura // 2 + 50, tamanho=40)

    pygame.display.flip()
    pygame.time.delay(5000)  # Espera 5 segundos antes de fechar o jogo
    pygame.quit()
    sys.exit()


def menu():
    while True:
        for evento in pygame.event.get():
            if evento.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

        tela.fill(PRETO)
        desenhar_texto("Menu do Jogo", largura // 2 - 100, altura // 4)
        desenhar_texto("1. Iniciar Jogo", largura // 2 - 150, altura // 2 - 50)
        desenhar_texto("2. Configurações", largura // 2 - 150, altura // 2)
        desenhar_texto("Pressione ESC para Sair", largura // 2 - 150, altura // 2 + 50)
        pygame.display.flip()

        teclas = pygame.key.get_pressed()
        if teclas[pygame.K_1]:
            print("Iniciar Jogo!")
            jogo()
        elif teclas[pygame.K_2]:
            print("Configurações!")
        elif teclas[pygame.K_ESCAPE]:
            pygame.quit()
            sys.exit()

def gerar_remedios(corredor_rect, quantidade=10):
    """Função para gerar remédios dentro do corredor"""
    remedios = []
    for _ in range(quantidade):
        x = random.randint(corredor_rect.left + 20, corredor_rect.right - 20)
        y = random.randint(corredor_rect.top + 20, corredor_rect.bottom - 20)
        remedios.append(Remedio(x, y, 20, VERDE))
    return remedios

def jogo():
    global personagem_pos, placar, contagem_tela, tempo_inicial, velocidade_personagem, bateu_na_parede, paralisado, tempo_paralisado, colisoes
    velocidade = velocidade_personagem
    remedios_coletados = 0  # Contador de remédios coletados


    # Corredor inicial
    corredor_rect = pygame.Rect(largura // 4 - 300, altura // 2 - 200, 1550, 400)
    tempo_inicial = time.time()  # Reinicializa o cronômetro ao iniciar o jogo

    # Gera remédios para a primeira fase
    remedios = gerar_remedios(corredor_rect)

    # Criar o inimigo
    inimigo = Inimigo(random.randint(corredor_rect.left + 20, corredor_rect.right - 20),
                     random.randint(corredor_rect.top + 20, corredor_rect.bottom - 20),
                     40, VERMELHO, 2)

    # Criar o segundo inimigo (para a terceira fase)
    inimigo2 = None  # Inicialmente, não criamos o inimigo 2 até a terceira fase

    # Flag que indica se o personagem está encostado em alguma parede
    bateu_na_parede = False

    while True:
        for evento in pygame.event.get():
            if evento.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

        teclas = pygame.key.get_pressed()
        posicao_anterior = personagem_pos[:]

        if teclas[pygame.K_a]:
            personagem_pos[0] -= velocidade_personagem
        if teclas[pygame.K_d]:
            personagem_pos[0] += velocidade_personagem
        if teclas[pygame.K_w]:
            personagem_pos[1] -= velocidade_personagem
        if teclas[pygame.K_s]:
            personagem_pos[1] += velocidade_personagem


        personagem_rect = pygame.Rect(personagem_pos[0], personagem_pos[1], largura_personagem, altura_personagem)

        # Verifica colisões com as paredes do corredor
        bateu_na_parede_atual = False

        if personagem_rect.left < corredor_rect.left:
            personagem_pos[0] = corredor_rect.left
            bateu_na_parede_atual = True
        elif personagem_rect.right > corredor_rect.right:
            personagem_pos[0] = corredor_rect.right - largura_personagem
            bateu_na_parede_atual = True
        if personagem_rect.top < corredor_rect.top:
            personagem_pos[1] = corredor_rect.top
            bateu_na_parede_atual = True
        elif personagem_rect.bottom > corredor_rect.bottom:
            personagem_pos[1] = corredor_rect.bottom - altura_personagem
            bateu_na_parede_atual = True

        # Se o personagem está encostado na parede e não estava antes, perde pontos e diminui a velocidade
        if bateu_na_parede_atual and not bateu_na_parede:
            # A cada colisão, aumenta a perda de pontos
            perda_de_pontos = max(1, int(10 - (velocidade_personagem // 2)))
            placar -= perda_de_pontos
            colisoes += 1
            # A cada 3 colisões, diminui a velocidade do personagem
            if colisoes % 3 == 0:
                velocidade_personagem = max(1, velocidade_personagem - 0.5)
            bateu_na_parede = True
        
        # Se o personagem saiu da parede, marca como "não bateu na parede"
        if not bateu_na_parede_atual:
            bateu_na_parede = False

        # Verifica colisões com os remédios
        # Verifica colisões com os remédios
        for remedio in remedios[:]:
            remedio_rect = pygame.Rect(remedio.x, remedio.y, remedio.size, remedio.size)
            if personagem_rect.colliderect(remedio_rect):
                remedios.remove(remedio)
                placar += 5
                remedios_coletados += 1  # Incrementa os remédios coletados
                # Aumenta a velocidade do personagem e diminui a perda de pontos com a parede
                print(velocidade_personagem)
                velocidade_personagem += 0.3
                colisoes = max(0, colisoes - 1)  # Diminui o contador de colisões, recuperando um pouco
                break

        # Verifica colisão com o inimigo
        inimigo_rect = pygame.Rect(inimigo.x, inimigo.y, inimigo.size, inimigo.size)
        if personagem_rect.colliderect(inimigo_rect):
            placar -= 20
            paralisado = True
            tempo_paralisado = time.time()
            inimigo = Inimigo(random.randint(corredor_rect.left + 20, corredor_rect.right - 20),
                             random.randint(corredor_rect.top + 20, corredor_rect.bottom - 20),
                             40, VERMELHO, 2)
        # Verifica colisão com o inimigo 2
        if inimigo2 and personagem_rect.colliderect(pygame.Rect(inimigo2.x, inimigo2.y, inimigo2.size, inimigo2.size)):
            placar -= 20
            paralisado = True
            tempo_paralisado = time.time()
            inimigo2 = Inimigo(random.randint(corredor_rect.left + 20, corredor_rect.right - 20),
                               random.randint(corredor_rect.top + 20, corredor_rect.bottom - 20),
                               40, VERMELHO, 2)


        # Paralisando o personagem
        if paralisado and time.time() - tempo_paralisado >= 5:
            paralisado = False

        # Movimento do inimigo
        inimigo.mover()

        # Se for a terceira fase (contagem_tela == 2)
        if contagem_tela == 2:
            # Criar o segundo inimigo na terceira fase (caso não tenha sido criado)
            if inimigo2 is None:
                inimigo2 = Inimigo(random.randint(corredor_rect.left + 20, corredor_rect.right - 20),
                                   random.randint(corredor_rect.top + 20, corredor_rect.bottom - 20),
                                   40, VERMELHO, 2)

            # Mover e desenhar o segundo inimigo
            inimigo2.mover()

        # Controle de transição entre as fases
        if contagem_tela == 0:
            if personagem_pos[0] + largura_personagem >= corredor_rect.right:
                contagem_tela = 1
                personagem_pos = [largura // 2 - largura_personagem // 2, altura // 2 - altura_personagem // 2]
                tempo_inicial = time.time()
                remedios = gerar_remedios(corredor_rect)
                segundaTela()

        elif contagem_tela == 1:
            if personagem_pos[0] + largura_personagem >= corredor_rect.right:
                contagem_tela = 2
                personagem_pos = [largura // 2 - largura_personagem // 2, altura // 2 - altura_personagem // 2]
                tempo_inicial = time.time()
                remedios = gerar_remedios(corredor_rect)
                terceiraTela()


        # Controle do tempo
        tempo_decorrido = int(time.time() - tempo_inicial)
        tempo_restante = tempo_limite - tempo_decorrido

        tela.fill(PRETO)
        pygame.draw.rect(tela, AZUL, corredor_rect, 1)

        # Desenha o número da fase no topo da tela (sempre visível)
        fase_texto = f"Fase {contagem_tela + 1}"  # Adiciona 1, pois o contagem_tela começa de 0
        desenhar_texto(fase_texto, largura // 2 - 75, 200, tamanho=55)

        # Desenha o personagem
        tela.blit(sprite_perso, personagem_pos, (0, 0, 80, 80))

        # Desenha os inimigos
        inimigo.draw(tela)
        if inimigo2:  # Desenha o segundo inimigo apenas se ele foi criado
            inimigo2.draw(tela)

        # Cronômetro e Placar
        minutos = tempo_restante // 60
        segundos = tempo_restante % 60
        cronometro_texto = f"{minutos:02}:{segundos:02}"
        desenhar_texto(cronometro_texto, largura // 2 + 200, altura // 2 + 300)
        desenhar_texto(f"Placar: {placar}", largura // 2 - 50, altura // 2 + 300)

        # Desenhar todos os remédios restantes
        for remedio in remedios:
            remedio.draw(tela)

        if tempo_restante <= 0:
            desenhar_texto("Tempo Esgotado!", largura // 2 - 100, altura // 2)
            pygame.display.flip()
            pygame.time.delay(2000)
            break
        # No fim do loop de jogo, após o tempo acabar ou os remédios serem coletados:
        if tempo_restante <= 0 or (contagem_tela == 2 and len(remedios) == 0):  # Fase 3, se todos os remédios foram pegos
            # Tela final com dados do jogo
            tela_final(remedios_coletados, placar, tempo_restante)
            break



        if teclas[pygame.K_ESCAPE]:
            pygame.quit()
            sys.exit()

        pygame.display.flip()


if __name__ == "__main__":
    menu()
